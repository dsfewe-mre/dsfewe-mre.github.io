<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Node 第三方包</title>
    <link href="/2021/02/27/Node.js%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/"/>
    <url>/2021/02/27/Node.js%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Node-js-第三方包"><a href="#Node-js-第三方包" class="headerlink" title="Node.js 第三方包"></a>Node.js 第三方包</h1><blockquote><p>常用的 <code>npm</code> 第三方包使用说明. 总结如下</p></blockquote><h3 id="1-cors-包"><a href="#1-cors-包" class="headerlink" title="1. cors 包"></a>1. <code>cors</code> 包</h3><ul><li><p>作用</p><p><code>cors</code>是一个 <code>node.js</code> 软件包，用于提供跨域资源请求的中间件</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i cors<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><span class="hljs-keyword">var</span> app = express()<br> <br><span class="hljs-comment">// 全局注册 cors 中间件</span><br>app.use(cors())<br> <br>app.get(<span class="hljs-string">&#x27;/products/:id&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.json(&#123;<span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;This is CORS-enabled for all origins!&#x27;</span>&#125;)<br>&#125;)<br> <br>app.listen(<span class="hljs-number">80</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;CORS-enabled web server listening on port 80&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p> <a href="https://www.npmjs.com/package/cors">cors</a></p></li></ul><h3 id="2-body-parser-包"><a href="#2-body-parser-包" class="headerlink" title="2. body-parser 包"></a>2. <code>body-parser</code> 包</h3><ul><li><p>作用</p><p><code>node.js</code> 的中间件,  专门用于解析发送 <code>post</code> 请求时请求体中的数据,  使用 <code>req.body</code> 属性即可获取解析后的对象</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i body-parser<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = express()<br> <br><span class="hljs-comment">// 解析 application/x-www-form-urlencoded 格式的请求体数据</span><br>app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br> <br><span class="hljs-comment">// 解析 application/json 格式的请求体数据</span><br>app.use(bodyParser.json())<br> <br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-comment">// 响应解析后的请求体对象</span><br>  res.send(req.body)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/body-parser">body-parser</a></p></li></ul><h3 id="3-mysql-包"><a href="#3-mysql-包" class="headerlink" title="3. mysql 包"></a>3. <code>mysql</code> 包</h3><ul><li><p>作用</p><p><code>npm</code> 上的第三方模块包, 为 <code>Node.js</code> 项目提供了连接和操作数据库的驱动</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i mysql<br></code></pre></td></tr></table></figure><ul><li><p>使用方法</p><ul><li>连接数据库-方法1(创建一个新连接)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mysql      = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br><br><span class="hljs-keyword">var</span> connection = mysql.createConnection(&#123;<br>  host     : <span class="hljs-string">&#x27;example.org&#x27;</span>,<br>  user     : <span class="hljs-string">&#x27;bob&#x27;</span>,<br>  password : <span class="hljs-string">&#x27;secret&#x27;</span>,<br>  database : <span class="hljs-string">&#x27;my_db&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 2. 使用 query方法执行 sql 语句</span><br>connection.query(<span class="hljs-string">&#x27;SELECT 1&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-comment">// connected!</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>连接数据库-方法2 (创建一个连接池)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br><span class="hljs-keyword">var</span> pool  = mysql.createPool(&#123;<br>  connectionLimit : <span class="hljs-number">10</span>,<br>  host            : <span class="hljs-string">&#x27;example.org&#x27;</span>,<br>  user            : <span class="hljs-string">&#x27;bob&#x27;</span>,<br>  password        : <span class="hljs-string">&#x27;secret&#x27;</span>,<br>  database        : <span class="hljs-string">&#x27;my_db&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 使用 query方法执行 sql 语句</span><br>pool.query(<span class="hljs-string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;The solution is: &#x27;</span>, results[<span class="hljs-number">0</span>].solution);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>执行<code>SQL</code>语句的方法 :  <code>query(sql语句, [values], callback)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 查询数据: ? 是一个占位符, 会被中括号中对应的值替换</span><br>db.query(<span class="hljs-string">&#x27;SELECT * FROM books WHERE author = ?&#x27;</span>, [<span class="hljs-string">&#x27;David&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-comment">// error 是查询中出现的错误</span><br>  <span class="hljs-comment">// results 是查询得到的所有结果</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新数据: 多个 ? 占位符, 会按照出现的先后顺序依次被中括号中的值替换</span><br>db.query(<span class="hljs-string">&#x27;UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?&#x27;</span>, [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, userId], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 插入数据: 快速插入一条数据</span><br><span class="hljs-keyword">var</span> post  = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Hello MySQL&#x27;</span>&#125;;<br>db.query(<span class="hljs-string">&#x27;INSERT INTO posts SET ?&#x27;</span>, post, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-comment">// ok!</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取插入, 更新 和 删除语句执行后影响的行数</span><br>db.query(<span class="hljs-string">&#x27;DELETE FROM posts WHERE title = &quot;wrong&quot;&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;deleted &#x27;</span> + results.affectedRows + <span class="hljs-string">&#x27; rows&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/mysql">mysql</a></p></li></ul><h3 id="4-bcryptjs-包"><a href="#4-bcryptjs-包" class="headerlink" title="4. bcryptjs 包"></a>4. <code>bcryptjs</code> 包</h3><ul><li><p>作用</p><p>密码不能以明文形式保存到数据库中，否则数据泄露密码就会被窃取,  密码一般加密存储.</p><p> <code>bcryptjs</code> 是一个第三方加密库，用来实现在 Node 环境下的密码加密</p></li></ul><ul><li><p>加盐(<strong>salt</strong>)</p><p>在密码学中，是指通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符，这种过程称之为 “加盐”.</p></li></ul><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i bcryptjs<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bcrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bcryptjs&#x27;</span>)<br><span class="hljs-comment">// .hashSync() 方法对明文密码 bacon 进行加盐加密, 盐值为 10 (数字越大,密码越不容易被破解)</span><br><span class="hljs-keyword">var</span> hash = bcrypt.hashSync(<span class="hljs-string">&#x27;bacon&#x27;</span>, <span class="hljs-number">10</span>);<br><br><span class="hljs-comment">// .compareSync(加密前的密码, 加密后的密码) 方法比较加密前后的密码是否匹配</span><br>bcrypt.compareSync(<span class="hljs-string">&quot;not_bacon&quot;</span>, hash) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/bcryptjs">bcryptjs</a></p></li></ul><h3 id="5-jsonwebtoken-包"><a href="#5-jsonwebtoken-包" class="headerlink" title="5. jsonwebtoken 包"></a>5. <code>jsonwebtoken</code> 包</h3><ul><li><p>作用</p><p>常用于网站中用户的身份认证,  可以把用户信息加密后生成一个 <code>token</code> 令牌, 不推荐存放用户密码等数据 </p></li><li><p><code>JWT </code>原理</p><p><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">参考说明</a></p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i jsonwebtoken<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><br><span class="hljs-keyword">var</span> privateKey = <span class="hljs-string">&#x27;seeyou&#x27;</span>; <span class="hljs-comment">// 私钥</span><br><span class="hljs-keyword">var</span> token = jwt.sign(&#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;xm&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">123</span>&#125;, privateKey, &#123;<br>    algorithm: <span class="hljs-string">&#x27;HS256&#x27;</span>, <span class="hljs-comment">// 加密算法</span><br>    expiresIn: <span class="hljs-string">&#x27;1h&#x27;</span> <span class="hljs-comment">// 过期时间</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p></li></ul><h3 id="6-express-jwt-包"><a href="#6-express-jwt-包" class="headerlink" title="6. express-jwt 包"></a>6. <code>express-jwt</code> 包</h3><ul><li><p>功能</p><p>提供给 <code>express</code> 的一个中间件, 可以验证 <code>JWT</code> 令牌是否有效, 并解码出 <code>JWT</code> 中用户信息挂载到 <code>req.user</code> 上</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i express-jwt<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-keyword">var</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>);<br><br><span class="hljs-comment">// 全局注册 jwt 中间件</span><br><span class="hljs-comment">// secret 是生成 jwt 时的秘钥; alg 是生成 jwt 时的加密算法</span><br><span class="hljs-comment">// .unless(&#123; path: [/^\/api\//] &#125;) 指定哪些接口不需要进行 jwt 的身份认证</span><br>app.use(jwt(&#123; <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;seeyou&#x27;</span>, <span class="hljs-attr">algorithms</span>: [<span class="hljs-string">&#x27;HS256&#x27;</span>]&#125;).unless(&#123;<span class="hljs-attr">path</span>: [<span class="hljs-regexp">/^\/api\//</span>]&#125;));<br><br><span class="hljs-comment">// jwt 解码后的用户信息通过 req.user 来进行获取</span><br>app.get(<span class="hljs-string">&#x27;/protected&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>    res.send(req.user) <span class="hljs-comment">// &#123; username: &#x27;xm&#x27;, id: 123&#125;</span><br>&#125;);<br><br><span class="hljs-comment">// 解码 token 不合法时会抛出一个错误, 统一在错误中间件中进行处理</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (err.name === <span class="hljs-string">&#x27;UnauthorizedError&#x27;</span>) &#123;<br>    res.status(<span class="hljs-number">401</span>).send(<span class="hljs-string">&#x27;invalid token...&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>官方文档 (**<code>npm</code> 文档没有更新, 参考最新的 <code>github</code> 文档 **)</p><p><a href="https://github.com/auth0/express-jwt">express-jwt</a>     </p></li></ul><h3 id="7-multer-包"><a href="#7-multer-包" class="headerlink" title="7. multer 包"></a>7. <code>multer</code> 包</h3><ul><li><p>作用</p><p><code>multer</code> 是 <code>node.js</code> 的中间件, 用来解析 <code>multipart/form-data</code> 格式提交的数据,  主要用于文件上传的场景;</p><p>文件一般不会直接存放在数据库, 影响查询效率,  更多的是把文件存储在本地,  再向数据库中存储本地文件的路径</p></li></ul><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i multer<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><p>​    表单中 <strong>文本字段</strong> 解析处理后的数据被挂载到 <code>req.body</code> 属性上</p><p>​    表单中 <strong>文件字段</strong> 解析处理后的数据被挂载到 <code>req.file</code>属性上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> multer  = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>)<br><br><span class="hljs-comment">// 创建 multer 的实例对象，通过 dest 属性指定上传文件的存放路径</span><br><span class="hljs-keyword">var</span> upload = multer(&#123; <span class="hljs-attr">dest</span>: path.join(__dirname, <span class="hljs-string">&#x27;../uploads&#x27;</span>) &#125;)<br><br><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-comment">//  upload.single(&#x27;cover_img&#x27;) 表示对 cover_img 这个文件字段单独处理</span><br>app.post(<span class="hljs-string">&#x27;/profile&#x27;</span>, upload.single(<span class="hljs-string">&#x27;cover_img&#x27;</span>), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-comment">// req.file对象 存放了的文件处理后的信息, </span><br>  <span class="hljs-comment">// 其中有 fieldname 属性: 表单提交时的字段名, filename 属性: 文件上传到本地后的默认文件名</span><br>  <span class="hljs-comment">// req.body对象 存放了文本字段解析后的值</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/multer">multer</a></p></li></ul><h3 id="8-hapi-joi-包"><a href="#8-hapi-joi-包" class="headerlink" title="8. @hapi/joi 包"></a>8. <code>@hapi/joi</code> 包</h3><ul><li><p>作用</p><p>在实际开发中，前后端都需要对表单的数据进行合法性的验证，而且，后端做为数据合法性验证的最后 一个关口，在拦截非法数据方面，起到了至关重要的作用,  <code>joi</code> 是 推荐使用第三方数据验证模块</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @hapi/joi<br></code></pre></td></tr></table></figure><ul><li>基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** </span><br><span class="hljs-comment">  * string() 值必须是字符串 </span><br><span class="hljs-comment">  * alphanum() 值只能是包含 a-zA-Z0-9 的字符串 </span><br><span class="hljs-comment">  * min(length) 最小长度 </span><br><span class="hljs-comment">  * max(length) 最大长度 </span><br><span class="hljs-comment">  * required() 值是必填项，不能为 undefined </span><br><span class="hljs-comment">  * pattern(正则表达式) 值必须符合正则表达式的规则 </span><br><span class="hljs-comment">  * email() 符合邮箱格式</span><br><span class="hljs-comment">  * integer() 值为整数</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-comment">// 用户名的验证规则 </span><br><span class="hljs-keyword">const</span> username = joi.string().alphanum().min(<span class="hljs-number">1</span>).max(<span class="hljs-number">10</span>).required()<br><br><span class="hljs-comment">// 密码的验证规则 </span><br><span class="hljs-keyword">const</span> password = joi.string().pattern(<span class="hljs-regexp">/^[\S]&#123;6,12&#125;$/</span>).required()<br><br><span class="hljs-comment">// 邮箱验证规则</span><br><span class="hljs-keyword">const</span> email = joi.string().email().required()<br><br><span class="hljs-comment">// id 验证规则</span><br><span class="hljs-keyword">const</span> id = joi.number().integer().min(<span class="hljs-number">1</span>).required() <br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://joi.dev/api/">Joi</a></p></li></ul><h3 id="9-escook-express-joi-包"><a href="#9-escook-express-joi-包" class="headerlink" title="9. @escook/express-joi 包"></a>9. <code>@escook/express-joi</code> 包</h3><ul><li><p>作用</p><p><code>express</code> 项目中对请求参数应用 <code>joi</code> 验证规则的中间件</p></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @escook/express-joi<br></code></pre></td></tr></table></figure></li><li><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 导入 Joi 来定义验证规则</span><br><span class="hljs-keyword">const</span> Joi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@hapi/joi&#x27;</span>)<br><span class="hljs-comment">// 1. 导入 @escook/express-joi</span><br><span class="hljs-keyword">const</span> expressJoi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@escook/express-joi&#x27;</span>)<br> <br><span class="hljs-comment">// 解析 x-www-form-urlencoded 格式的表单数据</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br> <br><span class="hljs-comment">// 2. 定义验证规则</span><br><span class="hljs-comment">// 注意：如果客户端提交的某些参数项未在 schema 中定义，</span><br><span class="hljs-comment">// 此时，这些多余的参数项默认会被忽略掉</span><br><span class="hljs-keyword">const</span> userSchema = &#123;<br>  <span class="hljs-comment">// 2.1 校验 req.body 中的数据</span><br>  body: &#123;<br>    username: Joi.string().alphanum().min(<span class="hljs-number">3</span>).max(<span class="hljs-number">12</span>).required(),<br>    password: Joi.string().pattern(<span class="hljs-regexp">/^[\S]&#123;6,15&#125;$/</span>).required(),<br>    repassword: Joi.ref(<span class="hljs-string">&#x27;password&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-comment">// 2.2 校验 req.query 中的数据</span><br>  query: &#123;<br>    name: Joi.string().alphanum().min(<span class="hljs-number">3</span>).required(),<br>    age: Joi.number().integer().min(<span class="hljs-number">1</span>).max(<span class="hljs-number">100</span>).required(),<br>  &#125;,<br>  <span class="hljs-comment">// 2.3 校验 req.params 中的数据</span><br>  params: &#123;<br>    id: Joi.number().integer().min(<span class="hljs-number">0</span>).required(),<br>  &#125;,<br>&#125;<br> <br><span class="hljs-comment">// 3. 在路由中通过 expressJoi(userSchema) 的方式</span><br><span class="hljs-comment">//    调用中间件进行参数验证</span><br>app.post(<span class="hljs-string">&#x27;/adduser/:id&#x27;</span>, expressJoi(userSchema), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> body = req.body<br>  res.send(body)<br>&#125;)<br> <br><span class="hljs-comment">// 4.1 错误级别中间件</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) </span>&#123;<br>  <span class="hljs-comment">// 4.1 Joi 参数校验失败</span><br>  <span class="hljs-keyword">if</span> (err <span class="hljs-keyword">instanceof</span> Joi.ValidationError) &#123;<br>    <span class="hljs-keyword">return</span> res.send(&#123;<br>      status: <span class="hljs-number">1</span>,<br>      message: err.message,<br>    &#125;)<br>  &#125;<br>  <span class="hljs-comment">// 4.2 未知错误</span><br>  res.send(&#123;<br>    status: <span class="hljs-number">1</span>,<br>    message: err.message,<br>  &#125;)<br>&#125;)<br> <br><span class="hljs-comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span><br>app.listen(<span class="hljs-number">3001</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Express server running at http://127.0.0.1:3001&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>官网文档</p><p><a href="https://www.npmjs.com/package/@escook/express-joi">@escook/express-joi</a></p></li></ul><h3 id="10-express-session-包"><a href="#10-express-session-包" class="headerlink" title="10. express-session 包"></a>10. <code>express-session</code> 包</h3><ul><li><p>作用</p><p>提供 <code>session</code> 身份认证方案的第三方包,  生成的 <code>session</code> 数据并不保存在客户端,  而是在服务端存储 (默认位置是内存里), 客户端分发的 <code>cookie</code> 仅仅是用来访问 <code>session</code> 数据的 <code>sessionID</code>.</p></li></ul><ul><li>安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i express-session<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-comment">// 创建一个 session 中间件, 并注册到全局</span><br>app.use(session(&#123;<br>  secret: <span class="hljs-string">&#x27;keyboard cat&#x27;</span>,<br>  resave: <span class="hljs-literal">false</span>,<br>  saveUninitialized: <span class="hljs-literal">true</span><br>&#125;))<br><br><span class="hljs-comment">// 通过 req.session 可以存储和获取 session 数据</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (req.session.isLogin) &#123;<br>    res.send(req.session.user)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;请重新登录!&#x27;</span>)<br>  &#125;<br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/logout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// TODO_04：清空 Session 信息</span><br>  <span class="hljs-comment">// 销毁当前用户存储的 session 数据</span><br>  req.session.destroy()<br>&#125;)<br><br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/express-session">express-session</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node中模块的加载机制</title>
    <link href="/2021/02/24/node%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/24/node%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="node中模块的加载机制"><a href="#node中模块的加载机制" class="headerlink" title="node中模块的加载机制"></a>node中模块的加载机制</h1><h2 id="1-模块的加载机制"><a href="#1-模块的加载机制" class="headerlink" title="1. 模块的加载机制"></a>1. 模块的加载机制</h2><h3 id="1-1-模块优先从缓存中进行加载"><a href="#1-1-模块优先从缓存中进行加载" class="headerlink" title="1.1 模块优先从缓存中进行加载"></a>1.1 模块优先从缓存中进行加载</h3><p>模块在第一次加载后会被缓存, 如果每次调用 require(‘foo’) 都解析到同一文件，则返回相同的对象,不会导致模块的代码被执行多次</p><h3 id="1-2-缓存的作用"><a href="#1-2-缓存的作用" class="headerlink" title="1.2 缓存的作用"></a>1.2 缓存的作用</h3><p>不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的加载效率</p><h2 id="2-内置模块的加载机制"><a href="#2-内置模块的加载机制" class="headerlink" title="2. 内置模块的加载机制"></a>2. 内置模块的加载机制</h2><h3 id="2-1-核心模块的加载机制"><a href="#2-1-核心模块的加载机制" class="headerlink" title="2.1 核心模块的加载机制"></a>2.1 核心模块的加载机制</h3><p>require() 总是会优先加载核心模块, 比如 require(‘http’) 始终返回内置的 HTTP 模块，即使有同名文件</p><h2 id="3-自定义模块的加载机制"><a href="#3-自定义模块的加载机制" class="headerlink" title="3. 自定义模块的加载机制"></a>3. 自定义模块的加载机制</h2><h3 id="3-1-自定义模块的加载机制"><a href="#3-1-自定义模块的加载机制" class="headerlink" title="3.1 自定义模块的加载机制"></a>3.1 自定义模块的加载机制</h3><p>使用 require() 方法去加载自定义模块，必须指定 ‘/‘、 ‘./‘ 或 ‘../‘ 开头的路径，如果没有这个路径标识，node 会默认把它当作是一个核心模块或来自 node_modules 目录下的第三方模块</p><h3 id="3-2-自定义文件模块"><a href="#3-2-自定义文件模块" class="headerlink" title="3.2 自定义文件模块"></a>3.2 自定义文件模块</h3><p>如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 .js、 .json 或 .node 拓展名再加载</p><h3 id="3-3-自定义目录模块"><a href="#3-3-自定义目录模块" class="headerlink" title="3.3 自定义目录模块"></a>3.3 自定义目录模块</h3><p>当传递一个目录标识符给 require () 方法时, 加载的顺序如下:</p><ol><li><p>在加载的目录下查找 package.json 的文件, 并寻找 main 属性作为 require 的入口</p></li><li><p>上述找不到,  Node.js 将会试图加载目录下的 index.js 或 index.node 文件</p></li></ol><h2 id="4-第三方模块的加载机制"><a href="#4-第三方模块的加载机制" class="headerlink" title="4. 第三方模块的加载机制"></a>4. 第三方模块的加载机制</h2><h3 id="4-1-第三方模块的加载机制"><a href="#4-1-第三方模块的加载机制" class="headerlink" title="4.1 第三方模块的加载机制"></a>4.1 第三方模块的加载机制</h3><p>如果传递给 require() 的模块标识符不是一个核心模块，也没有以 ‘/‘ 、 ‘../‘ 或 ‘./‘ 开头，那么 Node.js 会从当前模块的父目录开始，尝试从它的/node_modules 目录里加载模块。如果还是没有找到，则移动到再上一层父目录，直到文件系统的根目录。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 语句</title>
    <link href="/2021/02/24/SQL%20%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/24/SQL%20%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h1><h6 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h6><p>select * from users         查询表单的所有内容</p><p>select status from users   查询表单中 status 的内容</p><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><p>在 users 表单中 添加 usersname= xm，password=abc123 数据</p><p>insert into  users (username, password) values (‘xm’,’abc123’)    </p><h6 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h6><p>在 users 表单中 id=3 的password的密码 更新为 ‘zxcasd’</p><p>update users set password=’zxcasd’ where id=3</p><h6 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h6><p>delete from users where id=3   在users 表单中 删除id为3 的数据</p><h6 id="where-运算符"><a href="#where-运算符" class="headerlink" title="where 运算符"></a>where 运算符</h6><p>​     (1) &gt; 和 &gt;= </p><p>​      (2) &lt; 和 &lt;=</p><p>​      (3) != 或 &lt;&gt;</p><p>​      (4) =</p><p>​      (5) BETWEEN</p><p>​      (6) LIKE</p><h6 id="and-和-or-运算符"><a href="#and-和-or-运算符" class="headerlink" title="and  和 or  运算符"></a>and  和 or  运算符</h6><p>select * from users where id=3 and username=’shh’   查找id=3，username=shh; </p><p>select * from users where id=3 or username=’shh’ 查找id=3或username=’shh’</p><h6 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h6><p>select * from users order by status desc    用status 进行 降序排列</p><p>用 status 进行降序 在利用 id 进行升序</p><p>selcet *  from users order by status desc , id asc </p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组和字符串的相关方法</title>
    <link href="/2021/02/24/JS%E5%9F%BA%E7%A1%80%20-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/24/JS%E5%9F%BA%E7%A1%80%20-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="JS基础-数组和字符串的相关方法"><a href="#JS基础-数组和字符串的相关方法" class="headerlink" title="JS基础 - 数组和字符串的相关方法"></a>JS基础 - 数组和字符串的相关方法</h1><h2 id="JS基础-数组的相关方法"><a href="#JS基础-数组的相关方法" class="headerlink" title="JS基础 - 数组的相关方法"></a>JS基础 - 数组的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th><th>修改原数组</th></tr></thead><tbody><tr><td><strong><code>★push(n1, n2)</code></strong></td><td>追加元素到数组末尾</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>unshift(n1, n2)</code></strong></td><td>追加元素到数组开头</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>Array.isArray()</code></strong></td><td>判断一个值是否是数组</td><td>值或变量</td><td>布尔值</td><td>–</td></tr><tr><td><strong><code>pop()</code></strong></td><td>从数组末尾删除一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>shift()</code></strong></td><td>从数组开头添加一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>sort(fn)</code></strong></td><td>对数组进行排序</td><td>函数</td><td>排序后的数组</td><td>修改</td></tr><tr><td><strong><code>reverse()</code></strong></td><td>对数组进行翻转</td><td>无</td><td>翻转后的数组</td><td>修改</td></tr><tr><td><strong><code>★indexOf(元素)</code></strong></td><td>查找元素在数组中第一次出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>lastIndexOf(元素)</code></strong></td><td>从后向前查找元素在数组中出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>★join(连接符)</code></strong></td><td>把数组中元素连接并返回字符串</td><td>连接符</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>toString()</code></strong></td><td>把复杂数据类型转成字符串形式</td><td>无</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从m位置开始截取数组到n结束</td><td>索引值</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★splice(m, n)</code></strong></td><td>从m位置开始删除数组, 删除n个</td><td>(索引, 个数)</td><td>删除元素的新数组</td><td>会修改</td></tr><tr><td><strong><code>concat(arr1, arr2)</code></strong></td><td>拼接两个或多个数组</td><td>要拼接的数组</td><td>拼接后的新数组</td><td>不会修改</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="JS-基础-字符串的相关方法"><a href="#JS-基础-字符串的相关方法" class="headerlink" title="JS 基础 - 字符串的相关方法"></a>JS 基础 - 字符串的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><strong><code>length</code></strong></td><td>获取字符串的长度</td><td>无</td><td>字符串的长度</td></tr><tr><td><strong><code>★str[i]</code></strong></td><td>获取指定索引位置的字符</td><td>无</td><td>单个字符</td></tr><tr><td><strong><code>charAt(i)</code></strong></td><td>获取指定索引位置的字符</td><td>索引</td><td>单个字符</td></tr><tr><td><strong><code>★indexOf(字符[, n])</code></strong></td><td>从位置 n 开始查找字符的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>lastIndexOf(字符)</code></strong></td><td>从后向前查找字符出现的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★substr(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截取 n 位数</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>substring(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★split(分隔符)</code></strong></td><td>把字符串按照指定的分隔符分隔成数组</td><td>分隔符</td><td>新数组</td></tr><tr><td><strong><code>toUpperCase()</code></strong></td><td>把字符串中的小写字母转大写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>toLowerCase()</code></strong></td><td>把字符串中的大写字母转小写</td><td>无</td><td>转化后的字符串</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>备注:</strong><br>字符串中所有的方法都不会修改原本的字符串, 要想修改只能重新赋值;</p><p>重点记忆★的相关方法</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm相关命令总结</title>
    <link href="/2021/02/22/npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="npm相关命令总结"><a href="#npm相关命令总结" class="headerlink" title="npm相关命令总结"></a>npm相关命令总结</h1><h2 id="查看自己电脑上所安装的-npm-包管理工具的版本号"><a href="#查看自己电脑上所安装的-npm-包管理工具的版本号" class="headerlink" title="查看自己电脑上所安装的 npm 包管理工具的版本号"></a>查看自己电脑上所安装的 npm 包管理工具的版本号</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm -v<br></code></pre></td></tr></table></figure><h2 id="安装第三方包"><a href="#安装第三方包" class="headerlink" title="安装第三方包"></a>安装第三方包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install 包名称<br>npm i 包名称@xxx (安装固定版本包)<br>npm i 包名称 (简写形式)<br></code></pre></td></tr></table></figure><h2 id="卸载第三方包"><a href="#卸载第三方包" class="headerlink" title="卸载第三方包"></a>卸载第三方包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm uninstall 包名称<br></code></pre></td></tr></table></figure><h2 id="初始化-package-json文件"><a href="#初始化-package-json文件" class="headerlink" title="初始化 package.json文件"></a>初始化 package.json文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm init -y<br></code></pre></td></tr></table></figure><h2 id="一次性安装所有包"><a href="#一次性安装所有包" class="headerlink" title="一次性安装所有包"></a>一次性安装所有包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install <br></code></pre></td></tr></table></figure><h2 id="查看当前的下包镜像源"><a href="#查看当前的下包镜像源" class="headerlink" title="查看当前的下包镜像源"></a>查看当前的下包镜像源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm config get registry<br></code></pre></td></tr></table></figure><h2 id="将下包镜像源切换为淘宝镜像源"><a href="#将下包镜像源切换为淘宝镜像源" class="headerlink" title="将下包镜像源切换为淘宝镜像源"></a>将下包镜像源切换为淘宝镜像源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm config set registry=https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><h2 id="检查源有没有更换成功"><a href="#检查源有没有更换成功" class="headerlink" title="检查源有没有更换成功"></a>检查源有没有更换成功</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm config get registry<br></code></pre></td></tr></table></figure><h2 id="全局安装-nrm"><a href="#全局安装-nrm" class="headerlink" title="全局安装 nrm"></a>全局安装 nrm</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i nrm -g<br></code></pre></td></tr></table></figure><h2 id="查看所有可用的镜像源"><a href="#查看所有可用的镜像源" class="headerlink" title="查看所有可用的镜像源"></a>查看所有可用的镜像源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">nrm ls<br></code></pre></td></tr></table></figure><h2 id="切换下包镜像源为-taobao"><a href="#切换下包镜像源为-taobao" class="headerlink" title="切换下包镜像源为 taobao"></a>切换下包镜像源为 taobao</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">nrm use taobao<br></code></pre></td></tr></table></figure><h2 id="分类下载包"><a href="#分类下载包" class="headerlink" title="分类下载包"></a>分类下载包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i 包名 -D  开发依赖包(会被记录到 devDependencies)<br>npm i 包名     核心依赖包(会被记录到 dependencies 节点下)<br></code></pre></td></tr></table></figure><h2 id="安装全局包"><a href="#安装全局包" class="headerlink" title="安装全局包"></a>安装全局包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i 包名 -g<br></code></pre></td></tr></table></figure><h2 id="卸载全局安装的包"><a href="#卸载全局安装的包" class="headerlink" title="卸载全局安装的包"></a>卸载全局安装的包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm uninstall 包名 -g<br></code></pre></td></tr></table></figure><h2 id="一个把-markdown-格式的文档转成-html-格式文件的工具包"><a href="#一个把-markdown-格式的文档转成-html-格式文件的工具包" class="headerlink" title="一个把 markdown 格式的文档转成 html 格式文件的工具包"></a>一个把 markdown 格式的文档转成 html 格式文件的工具包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i -g i5ting_toc  全局安装<br>i5ting_toc -f xxx.md -o  使用全局命令并在浏览器打开转换好的html文件<br></code></pre></td></tr></table></figure><h2 id="登录到npm"><a href="#登录到npm" class="headerlink" title="登录到npm"></a>登录到npm</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm login   需要在下包镜像源为npm下执行命令<br></code></pre></td></tr></table></figure><h2 id="发布自己写的包"><a href="#发布自己写的包" class="headerlink" title="发布自己写的包"></a>发布自己写的包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm publish   在包的发布目录下面执行命令<br>npm unpublish 包名称 --force   删除已经发布的包<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动web开发流式布局</title>
    <link href="/2021/02/09/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91_%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <url>/2021/02/09/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91_%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="移动web开发流式布局"><a href="#移动web开发流式布局" class="headerlink" title="移动web开发流式布局"></a>移动web开发流式布局</h1><h3 id="1-0-移动端基础"><a href="#1-0-移动端基础" class="headerlink" title="1.0 移动端基础"></a>1.0 移动端基础</h3><h4 id="1-1浏览器现状"><a href="#1-1浏览器现状" class="headerlink" title="1.1浏览器现状"></a>1.1浏览器现状</h4><p> PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。</p><p>移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><h4 id="1-2-手机屏幕的现状"><a href="#1-2-手机屏幕的现状" class="headerlink" title="1.2 手机屏幕的现状"></a>1.2 手机屏幕的现状</h4><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li></ul><h4 id="1-3常见移动端屏幕尺寸"><a href="#1-3常见移动端屏幕尺寸" class="headerlink" title="1.3常见移动端屏幕尺寸"></a>1.3常见移动端屏幕尺寸</h4><img src="images/1.png"><h4 id="1-4移动端调试方法"><a href="#1-4移动端调试方法" class="headerlink" title="1.4移动端调试方法"></a>1.4移动端调试方法</h4><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h3 id="2-0-视口"><a href="#2-0-视口" class="headerlink" title="2.0 视口"></a>2.0 视口</h3><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p><h4 id="2-1-布局视口-layout-viewport"><a href="#2-1-布局视口-layout-viewport" class="headerlink" title="2.1 布局视口 layout viewport"></a>2.1 布局视口 layout viewport</h4><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><img src="./images/2.png"><p>####2.2视觉视口 visual viewport</p><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><img src="./images/3.png"><h4 id="2-3理想视口-ideal-viewport"><a href="#2-3理想视口-ideal-viewport" class="headerlink" title="2.3理想视口 ideal viewport"></a>2.3理想视口 ideal viewport</h4><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写meta视口标签通知浏览器操作</p><p>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p><strong>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</strong></p><h4 id="2-4meta标签"><a href="#2-4meta标签" class="headerlink" title="2.4meta标签"></a>2.4meta标签</h4><img src="./images/4.png"><p>最标准的viewport设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h3 id="3-0二倍图"><a href="#3-0二倍图" class="headerlink" title="3.0二倍图"></a>3.0二倍图</h3><p>####3.1物理像素&amp;物理像素比</p><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>我们开发时候的1px 不是一定等于1个物理像素的</p><p>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p><p>如果把1张100*100的图片放到手机里面会按照物理像素比给我们缩放</p><p>lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</p><p>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</p><p>通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题</p><h4 id="3-2背景缩放background-size"><a href="#3-2背景缩放background-size" class="headerlink" title="3.2背景缩放background-size"></a>3.2背景缩放background-size</h4><p>background-size 属性规定背景图像的尺寸</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">background</span>-<span class="hljs-built_in">size</span>: 背景图片宽度 背景图片高度;<br></code></pre></td></tr></table></figure><p>单位： 长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h3 id="4-0-移动开发选择和技术解决方案"><a href="#4-0-移动开发选择和技术解决方案" class="headerlink" title="4.0 移动开发选择和技术解决方案"></a>4.0 移动开发选择和技术解决方案</h3><p>####4.1移动端主流方案</p><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile)<br>可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站</p><p>京东pc端：</p><img src="./images/5.png"><p>京东移动端：</p><img src="./images/6.jpg"><p>2.响应式页面兼容移动端（其次）</p><img src="./images/7.jpg"><p>响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p><h4 id="4-2-移动端技术解决方案"><a href="#4-2-移动端技术解决方案" class="headerlink" title="4.2 移动端技术解决方案"></a>4.2 移动端技术解决方案</h4><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。</p><p>我们可以放心使用 H5 标签和 CSS3 样式。</p><p>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><h4 id="4-3-移动端大量使用-CSS3盒子模型box-sizin"><a href="#4-3-移动端大量使用-CSS3盒子模型box-sizin" class="headerlink" title="4.3 移动端大量使用 CSS3盒子模型box-sizin"></a>4.3 移动端大量使用 CSS3盒子模型box-sizin</h4><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-comment">/*CSS3盒子模型*/</span><br><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br><span class="hljs-comment">/*传统盒子模型*/</span><br><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span>;<br><br></code></pre></td></tr></table></figure><p>移动端可以全部CSS3 盒子模型</p><p>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</p><h4 id="4-4移动端特殊样式"><a href="#4-4移动端特殊样式" class="headerlink" title="4.4移动端特殊样式"></a>4.4移动端特殊样式</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-comment">/*CSS3盒子模型*/</span><br><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br>-webkit-<span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br><span class="hljs-comment">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span><br>-webkit-tap-highlight-<span class="hljs-built_in">color</span>: <span class="hljs-built_in">transparent</span>;<br><span class="hljs-comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span><br>-webkit-appearance: none;<br><span class="hljs-comment">/*禁用长按页面时的弹出菜单*/</span><br>img,a &#123; -webkit-touch-callout: none; &#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-0移动端常见布局"><a href="#5-0移动端常见布局" class="headerlink" title="5.0移动端常见布局"></a>5.0移动端常见布局</h3><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><p>流式布局：</p><p>流式布局，就是百分比布局，也称非固定像素布局。</p><p>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</p><p>流式布局方式是移动web开发使用的比较常见的布局方式。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
