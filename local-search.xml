<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>node中模块的加载机制</title>
    <link href="/2021/02/24/node%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/02/24/node%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="node中模块的加载机制"><a href="#node中模块的加载机制" class="headerlink" title="node中模块的加载机制"></a>node中模块的加载机制</h1><h2 id="1-模块的加载机制"><a href="#1-模块的加载机制" class="headerlink" title="1. 模块的加载机制"></a>1. 模块的加载机制</h2><h3 id="1-1-模块优先从缓存中进行加载"><a href="#1-1-模块优先从缓存中进行加载" class="headerlink" title="1.1 模块优先从缓存中进行加载"></a>1.1 模块优先从缓存中进行加载</h3><p>模块在第一次加载后会被缓存, 如果每次调用 require(‘foo’) 都解析到同一文件，则返回相同的对象,不会导致模块的代码被执行多次</p><h3 id="1-2-缓存的作用"><a href="#1-2-缓存的作用" class="headerlink" title="1.2 缓存的作用"></a>1.2 缓存的作用</h3><p>不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的加载效率</p><h2 id="2-内置模块的加载机制"><a href="#2-内置模块的加载机制" class="headerlink" title="2. 内置模块的加载机制"></a>2. 内置模块的加载机制</h2><h3 id="2-1-核心模块的加载机制"><a href="#2-1-核心模块的加载机制" class="headerlink" title="2.1 核心模块的加载机制"></a>2.1 核心模块的加载机制</h3><p>require() 总是会优先加载核心模块, 比如 require(‘http’) 始终返回内置的 HTTP 模块，即使有同名文件</p><h2 id="3-自定义模块的加载机制"><a href="#3-自定义模块的加载机制" class="headerlink" title="3. 自定义模块的加载机制"></a>3. 自定义模块的加载机制</h2><h3 id="3-1-自定义模块的加载机制"><a href="#3-1-自定义模块的加载机制" class="headerlink" title="3.1 自定义模块的加载机制"></a>3.1 自定义模块的加载机制</h3><p>使用 require() 方法去加载自定义模块，必须指定 ‘/‘、 ‘./‘ 或 ‘../‘ 开头的路径，如果没有这个路径标识，node 会默认把它当作是一个核心模块或来自 node_modules 目录下的第三方模块</p><h3 id="3-2-自定义文件模块"><a href="#3-2-自定义文件模块" class="headerlink" title="3.2 自定义文件模块"></a>3.2 自定义文件模块</h3><p>如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 .js、 .json 或 .node 拓展名再加载</p><h3 id="3-3-自定义目录模块"><a href="#3-3-自定义目录模块" class="headerlink" title="3.3 自定义目录模块"></a>3.3 自定义目录模块</h3><p>当传递一个目录标识符给 require () 方法时, 加载的顺序如下:</p><ol><li><p>在加载的目录下查找 package.json 的文件, 并寻找 main 属性作为 require 的入口</p></li><li><p>上述找不到,  Node.js 将会试图加载目录下的 index.js 或 index.node 文件</p></li></ol><h2 id="4-第三方模块的加载机制"><a href="#4-第三方模块的加载机制" class="headerlink" title="4. 第三方模块的加载机制"></a>4. 第三方模块的加载机制</h2><h3 id="4-1-第三方模块的加载机制"><a href="#4-1-第三方模块的加载机制" class="headerlink" title="4.1 第三方模块的加载机制"></a>4.1 第三方模块的加载机制</h3><p>如果传递给 require() 的模块标识符不是一个核心模块，也没有以 ‘/‘ 、 ‘../‘ 或 ‘./‘ 开头，那么 Node.js 会从当前模块的父目录开始，尝试从它的/node_modules 目录里加载模块。如果还是没有找到，则移动到再上一层父目录，直到文件系统的根目录。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 语句</title>
    <link href="/2021/02/24/SQL%20%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/24/SQL%20%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h1><h6 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h6><p>select * from users         查询表单的所有内容</p><p>select status from users   查询表单中 status 的内容</p><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><p>在 users 表单中 添加 usersname= xm，password=abc123 数据</p><p>insert into  users (username, password) values (‘xm’,’abc123’)    </p><h6 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h6><p>在 users 表单中 id=3 的password的密码 更新为 ‘zxcasd’</p><p>update users set password=’zxcasd’ where id=3</p><h6 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h6><p>delete from users where id=3   在users 表单中 删除id为3 的数据</p><h6 id="where-运算符"><a href="#where-运算符" class="headerlink" title="where 运算符"></a>where 运算符</h6><p>​     (1) &gt; 和 &gt;= </p><p>​      (2) &lt; 和 &lt;=</p><p>​      (3) != 或 &lt;&gt;</p><p>​      (4) =</p><p>​      (5) BETWEEN</p><p>​      (6) LIKE</p><h6 id="and-和-or-运算符"><a href="#and-和-or-运算符" class="headerlink" title="and  和 or  运算符"></a>and  和 or  运算符</h6><p>select * from users where id=3 and username=’shh’   查找id=3，username=shh; </p><p>select * from users where id=3 or username=’shh’ 查找id=3或username=’shh’</p><h6 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h6><p>select * from users order by status desc    用status 进行 降序排列</p><p>用 status 进行降序 在利用 id 进行升序</p><p>selcet *  from users order by status desc , id asc </p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/24/JS%E5%9F%BA%E7%A1%80%20-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/24/JS%E5%9F%BA%E7%A1%80%20-%20%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>title: JS基础 - 数组和字符串的相关方法<br>categories:</p><ul><li>笔记<br>tags:</li><li>node</li></ul><h1 id="JS基础-数组和字符串的相关方法"><a href="#JS基础-数组和字符串的相关方法" class="headerlink" title="JS基础 - 数组和字符串的相关方法"></a>JS基础 - 数组和字符串的相关方法</h1><h2 id="JS基础-数组的相关方法"><a href="#JS基础-数组的相关方法" class="headerlink" title="JS基础 - 数组的相关方法"></a>JS基础 - 数组的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th><th>修改原数组</th></tr></thead><tbody><tr><td><strong><code>★push(n1, n2)</code></strong></td><td>追加元素到数组末尾</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>unshift(n1, n2)</code></strong></td><td>追加元素到数组开头</td><td>要追加的元素</td><td>数组的长度</td><td>修改</td></tr><tr><td><strong><code>Array.isArray()</code></strong></td><td>判断一个值是否是数组</td><td>值或变量</td><td>布尔值</td><td>–</td></tr><tr><td><strong><code>pop()</code></strong></td><td>从数组末尾删除一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>shift()</code></strong></td><td>从数组开头添加一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td><strong><code>sort(fn)</code></strong></td><td>对数组进行排序</td><td>函数</td><td>排序后的数组</td><td>修改</td></tr><tr><td><strong><code>reverse()</code></strong></td><td>对数组进行翻转</td><td>无</td><td>翻转后的数组</td><td>修改</td></tr><tr><td><strong><code>★indexOf(元素)</code></strong></td><td>查找元素在数组中第一次出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>lastIndexOf(元素)</code></strong></td><td>从后向前查找元素在数组中出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td><strong><code>★join(连接符)</code></strong></td><td>把数组中元素连接并返回字符串</td><td>连接符</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>toString()</code></strong></td><td>把复杂数据类型转成字符串形式</td><td>无</td><td>字符串</td><td>不会修改</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从m位置开始截取数组到n结束</td><td>索引值</td><td>新数组</td><td>不会修改</td></tr><tr><td><strong><code>★splice(m, n)</code></strong></td><td>从m位置开始删除数组, 删除n个</td><td>(索引, 个数)</td><td>删除元素的新数组</td><td>会修改</td></tr><tr><td><strong><code>concat(arr1, arr2)</code></strong></td><td>拼接两个或多个数组</td><td>要拼接的数组</td><td>拼接后的新数组</td><td>不会修改</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="JS-基础-字符串的相关方法"><a href="#JS-基础-字符串的相关方法" class="headerlink" title="JS 基础 - 字符串的相关方法"></a>JS 基础 - 字符串的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><strong><code>length</code></strong></td><td>获取字符串的长度</td><td>无</td><td>字符串的长度</td></tr><tr><td><strong><code>★str[i]</code></strong></td><td>获取指定索引位置的字符</td><td>无</td><td>单个字符</td></tr><tr><td><strong><code>charAt(i)</code></strong></td><td>获取指定索引位置的字符</td><td>索引</td><td>单个字符</td></tr><tr><td><strong><code>★indexOf(字符[, n])</code></strong></td><td>从位置 n 开始查找字符的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>lastIndexOf(字符)</code></strong></td><td>从后向前查找字符出现的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong><code>★slice(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★substr(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截取 n 位数</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>substring(m[, n])</code></strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong><code>★split(分隔符)</code></strong></td><td>把字符串按照指定的分隔符分隔成数组</td><td>分隔符</td><td>新数组</td></tr><tr><td><strong><code>toUpperCase()</code></strong></td><td>把字符串中的小写字母转大写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong><code>toLowerCase()</code></strong></td><td>把字符串中的大写字母转小写</td><td>无</td><td>转化后的字符串</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>备注:</strong><br>字符串中所有的方法都不会修改原本的字符串, 要想修改只能重新赋值;</p><p>重点记忆★的相关方法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npm相关命令总结</title>
    <link href="/2021/02/22/npm%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="npm相关命令总结"><a href="#npm相关命令总结" class="headerlink" title="npm相关命令总结"></a>npm相关命令总结</h1><h2 id="查看自己电脑上所安装的-npm-包管理工具的版本号"><a href="#查看自己电脑上所安装的-npm-包管理工具的版本号" class="headerlink" title="查看自己电脑上所安装的 npm 包管理工具的版本号"></a>查看自己电脑上所安装的 npm 包管理工具的版本号</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm -v<br></code></pre></td></tr></table></figure><h2 id="安装第三方包"><a href="#安装第三方包" class="headerlink" title="安装第三方包"></a>安装第三方包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install 包名称<br>npm i 包名称@xxx (安装固定版本包)<br>npm i 包名称 (简写形式)<br></code></pre></td></tr></table></figure><h2 id="卸载第三方包"><a href="#卸载第三方包" class="headerlink" title="卸载第三方包"></a>卸载第三方包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm uninstall 包名称<br></code></pre></td></tr></table></figure><h2 id="初始化-package-json文件"><a href="#初始化-package-json文件" class="headerlink" title="初始化 package.json文件"></a>初始化 package.json文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm init -y<br></code></pre></td></tr></table></figure><h2 id="一次性安装所有包"><a href="#一次性安装所有包" class="headerlink" title="一次性安装所有包"></a>一次性安装所有包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install <br></code></pre></td></tr></table></figure><h2 id="查看当前的下包镜像源"><a href="#查看当前的下包镜像源" class="headerlink" title="查看当前的下包镜像源"></a>查看当前的下包镜像源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm config get registry<br></code></pre></td></tr></table></figure><h2 id="将下包镜像源切换为淘宝镜像源"><a href="#将下包镜像源切换为淘宝镜像源" class="headerlink" title="将下包镜像源切换为淘宝镜像源"></a>将下包镜像源切换为淘宝镜像源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm config set registry=https:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><h2 id="检查源有没有更换成功"><a href="#检查源有没有更换成功" class="headerlink" title="检查源有没有更换成功"></a>检查源有没有更换成功</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm config get registry<br></code></pre></td></tr></table></figure><h2 id="全局安装-nrm"><a href="#全局安装-nrm" class="headerlink" title="全局安装 nrm"></a>全局安装 nrm</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i nrm -g<br></code></pre></td></tr></table></figure><h2 id="查看所有可用的镜像源"><a href="#查看所有可用的镜像源" class="headerlink" title="查看所有可用的镜像源"></a>查看所有可用的镜像源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">nrm ls<br></code></pre></td></tr></table></figure><h2 id="切换下包镜像源为-taobao"><a href="#切换下包镜像源为-taobao" class="headerlink" title="切换下包镜像源为 taobao"></a>切换下包镜像源为 taobao</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">nrm use taobao<br></code></pre></td></tr></table></figure><h2 id="分类下载包"><a href="#分类下载包" class="headerlink" title="分类下载包"></a>分类下载包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i 包名 -D  开发依赖包(会被记录到 devDependencies)<br>npm i 包名     核心依赖包(会被记录到 dependencies 节点下)<br></code></pre></td></tr></table></figure><h2 id="安装全局包"><a href="#安装全局包" class="headerlink" title="安装全局包"></a>安装全局包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i 包名 -g<br></code></pre></td></tr></table></figure><h2 id="卸载全局安装的包"><a href="#卸载全局安装的包" class="headerlink" title="卸载全局安装的包"></a>卸载全局安装的包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm uninstall 包名 -g<br></code></pre></td></tr></table></figure><h2 id="一个把-markdown-格式的文档转成-html-格式文件的工具包"><a href="#一个把-markdown-格式的文档转成-html-格式文件的工具包" class="headerlink" title="一个把 markdown 格式的文档转成 html 格式文件的工具包"></a>一个把 markdown 格式的文档转成 html 格式文件的工具包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i -g i5ting_toc  全局安装<br>i5ting_toc -f xxx.md -o  使用全局命令并在浏览器打开转换好的html文件<br></code></pre></td></tr></table></figure><h2 id="登录到npm"><a href="#登录到npm" class="headerlink" title="登录到npm"></a>登录到npm</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm login   需要在下包镜像源为npm下执行命令<br></code></pre></td></tr></table></figure><h2 id="发布自己写的包"><a href="#发布自己写的包" class="headerlink" title="发布自己写的包"></a>发布自己写的包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm publish   在包的发布目录下面执行命令<br>npm unpublish 包名称 --force   删除已经发布的包<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动web开发流式布局</title>
    <link href="/2021/02/09/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91_%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <url>/2021/02/09/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91_%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="移动web开发流式布局"><a href="#移动web开发流式布局" class="headerlink" title="移动web开发流式布局"></a>移动web开发流式布局</h1><h3 id="1-0-移动端基础"><a href="#1-0-移动端基础" class="headerlink" title="1.0 移动端基础"></a>1.0 移动端基础</h3><h4 id="1-1浏览器现状"><a href="#1-1浏览器现状" class="headerlink" title="1.1浏览器现状"></a>1.1浏览器现状</h4><p> PC端常见浏览器：360浏览器、谷歌浏览器、火狐浏览器、QQ浏览器、百度浏览器、搜狗浏览器、IE浏览器。</p><p>移动端常见浏览器：UC浏览器，QQ浏览器，欧朋浏览器，百度手机浏览器，360安全浏览器，谷歌浏览器，搜狗手机浏览器，猎豹浏览器，以及其他杂牌浏览器。</p><p>国内的UC和QQ，百度等手机浏览器都是根据Webkit修改过来的内核，国内尚无自主研发的内核，就像国内的手机操作系统都是基于Android修改开发的一样。</p><p><strong>总结：兼容移动端主流浏览器，处理Webkit内核浏览器即可。</strong></p><h4 id="1-2-手机屏幕的现状"><a href="#1-2-手机屏幕的现状" class="headerlink" title="1.2 手机屏幕的现状"></a>1.2 手机屏幕的现状</h4><ul><li>移动端设备屏幕尺寸非常多，碎片化严重。</li><li>Android设备有多种分辨率：480x800, 480x854, 540x960, 720x1280，1080x1920等，还有传说中的2K，4k屏。</li><li>近年来iPhone的碎片化也加剧了，其设备的主要分辨率有：640x960, 640x1136, 750x1334, 1242x2208等。</li><li>作为开发者无需关注这些分辨率，因为我们常用的尺寸单位是 px 。</li></ul><h4 id="1-3常见移动端屏幕尺寸"><a href="#1-3常见移动端屏幕尺寸" class="headerlink" title="1.3常见移动端屏幕尺寸"></a>1.3常见移动端屏幕尺寸</h4><img src="images/1.png"><h4 id="1-4移动端调试方法"><a href="#1-4移动端调试方法" class="headerlink" title="1.4移动端调试方法"></a>1.4移动端调试方法</h4><ul><li>Chrome DevTools（谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h3 id="2-0-视口"><a href="#2-0-视口" class="headerlink" title="2.0 视口"></a>2.0 视口</h3><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。 视口可以分为布局视口、视觉视口和理想视口</p><h4 id="2-1-布局视口-layout-viewport"><a href="#2-1-布局视口-layout-viewport" class="headerlink" title="2.1 布局视口 layout viewport"></a>2.1 布局视口 layout viewport</h4><p>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。</p><p>iOS, Android基本都将这个视口分辨率设置为 980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><img src="./images/2.png"><p>####2.2视觉视口 visual viewport</p><p>字面意思，它是用户正在看到的网站的区域。注意：是网站的区域。</p><p>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p><img src="./images/3.png"><h4 id="2-3理想视口-ideal-viewport"><a href="#2-3理想视口-ideal-viewport" class="headerlink" title="2.3理想视口 ideal viewport"></a>2.3理想视口 ideal viewport</h4><p>为了使网站在移动端有最理想的浏览和阅读宽度而设定</p><p>理想视口，对设备来讲，是最理想的视口尺寸</p><p>需要手动添写meta视口标签通知浏览器操作</p><p>meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就多宽</p><p><strong>总结：我们开发最终会用理想视口，而理想视口就是将布局视口的宽度修改为视觉视口</strong></p><h4 id="2-4meta标签"><a href="#2-4meta标签" class="headerlink" title="2.4meta标签"></a>2.4meta标签</h4><img src="./images/4.png"><p>最标准的viewport设置</p><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h3 id="3-0二倍图"><a href="#3-0二倍图" class="headerlink" title="3.0二倍图"></a>3.0二倍图</h3><p>####3.1物理像素&amp;物理像素比</p><p>物理像素点指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了,比如苹果6 是  750* 1334</p><p>我们开发时候的1px 不是一定等于1个物理像素的</p><p>一个px的能显示的物理像素点的个数，称为物理像素比或屏幕像素比</p><p>如果把1张100*100的图片放到手机里面会按照物理像素比给我们缩放</p><p>lRetina（视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。</p><p>对于一张 50px * 50px 的图片,在手机或 Retina 屏中打开，按照刚才的物理像素比会放大倍数，这样会造成图片模糊</p><p>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</p><p>通常使用二倍图， 因为iPhone 6 的影响背景图片 注意缩放问题</p><h4 id="3-2背景缩放background-size"><a href="#3-2背景缩放background-size" class="headerlink" title="3.2背景缩放background-size"></a>3.2背景缩放background-size</h4><p>background-size 属性规定背景图像的尺寸</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">background</span>-<span class="hljs-built_in">size</span>: 背景图片宽度 背景图片高度;<br></code></pre></td></tr></table></figure><p>单位： 长度|百分比|cover|contain;</p><p>cover把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</p><p>contain把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</p><h3 id="4-0-移动开发选择和技术解决方案"><a href="#4-0-移动开发选择和技术解决方案" class="headerlink" title="4.0 移动开发选择和技术解决方案"></a>4.0 移动开发选择和技术解决方案</h3><p>####4.1移动端主流方案</p><p>1.单独制作移动端页面（主流）</p><p>通常情况下，网址域名前面加 m(mobile)<br>可以打开移动端。通过判断设备，如果是移动设备打开，则跳到移动端页面。  </p><p>也就是说，PC端和移动端为两套网站，pc端是pc断的样式，移动端在写一套，专门针对移动端适配的一套网站</p><p>京东pc端：</p><img src="./images/5.png"><p>京东移动端：</p><img src="./images/6.jpg"><p>2.响应式页面兼容移动端（其次）</p><img src="./images/7.jpg"><p>响应式网站：即pc和移动端共用一套网站，只不过在不同屏幕下，样式会自动适配</p><h4 id="4-2-移动端技术解决方案"><a href="#4-2-移动端技术解决方案" class="headerlink" title="4.2 移动端技术解决方案"></a>4.2 移动端技术解决方案</h4><p>1.移动端浏览器兼容问题</p><p>移动端浏览器基本以 webkit 内核为主，因此我们就考虑webkit兼容性问题。</p><p>我们可以放心使用 H5 标签和 CSS3 样式。</p><p>同时我们浏览器的私有前缀我们只需要考虑添加 webkit 即可</p><p>2.移动端公共样式</p><p>移动端 CSS 初始化推荐使用 normalize.css/</p><p>Normalize.css：保护了有价值的默认值</p><p>Normalize.css：修复了浏览器的bug</p><p>Normalize.css：是模块化的</p><p>Normalize.css：拥有详细的文档</p><p>官网地址： <a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><h4 id="4-3-移动端大量使用-CSS3盒子模型box-sizin"><a href="#4-3-移动端大量使用-CSS3盒子模型box-sizin" class="headerlink" title="4.3 移动端大量使用 CSS3盒子模型box-sizin"></a>4.3 移动端大量使用 CSS3盒子模型box-sizin</h4><p>传统模式宽度计算：盒子的宽度 = CSS中设置的width + border + padding </p><p>CSS3盒子模型：     盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding </p><p>也就是说，我们的CSS3中的盒子模型， padding 和 border 不会撑大盒子了</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-comment">/*CSS3盒子模型*/</span><br><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br><span class="hljs-comment">/*传统盒子模型*/</span><br><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span>;<br><br></code></pre></td></tr></table></figure><p>移动端可以全部CSS3 盒子模型</p><p>PC端如果完全需要兼容，我们就用传统模式，如果不考虑兼容性，我们就选择 CSS3 盒子模型</p><h4 id="4-4移动端特殊样式"><a href="#4-4移动端特殊样式" class="headerlink" title="4.4移动端特殊样式"></a>4.4移动端特殊样式</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-comment">/*CSS3盒子模型*/</span><br><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br>-webkit-<span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br><span class="hljs-comment">/*点击高亮我们需要清除清除  设置为transparent 完成透明*/</span><br>-webkit-tap-highlight-<span class="hljs-built_in">color</span>: <span class="hljs-built_in">transparent</span>;<br><span class="hljs-comment">/*在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式*/</span><br>-webkit-appearance: none;<br><span class="hljs-comment">/*禁用长按页面时的弹出菜单*/</span><br>img,a &#123; -webkit-touch-callout: none; &#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-0移动端常见布局"><a href="#5-0移动端常见布局" class="headerlink" title="5.0移动端常见布局"></a>5.0移动端常见布局</h3><p>移动端单独制作</p><ul><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less+rem+媒体查询布局</li><li>混合布局</li></ul><p>响应式</p><ul><li>媒体查询</li><li>bootstarp</li></ul><p>流式布局：</p><p>流式布局，就是百分比布局，也称非固定像素布局。</p><p>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</p><p>流式布局方式是移动web开发使用的比较常见的布局方式。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
